{"title":"Java 异常机制","date":"2022-09-20T19:06:02.000Z","date_formatted":{"ll":"Sep 20, 2022","L":"09/20/2022","MM-DD":"09-20"},"link":"2022/09/20/exceptions","tags":["Exception"],"categories":["Java"],"updated":"2023-03-20T13:05:13.185Z","content":"<h1 id=\"java-异常机制\">Java 异常机制<a title=\"#java-异常机制\" href=\"#java-异常机制\"></a></h1>\n<h2 id=\"异常\">异常<a title=\"#异常\" href=\"#异常\"></a></h2>\n<p>异常是指程序在运行过程中发生的，由于外部问题导致的程序运行异常事件，异常的发生往往会中断程序的运行。<br>\n在 Java 中，异常本身也是一个对象，程序发生异常就会产生一个异常对象。</p>\n<h3 id=\"java-的异常结构\">Java 的异常结构<a title=\"#java-的异常结构\" href=\"#java-的异常结构\"></a></h3>\n<p><img src=\"https://s2.loli.net/2023/03/20/2f4ZoQ6M8xOERGn.png\" alt=\"structure-of-java-exception.png\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li><code>Throwable</code> 所有 Error 和 Exception 的超类。它包含了其线程创建时线程执行堆栈的快照，提供了 printStackTrace() 等接口用于获取堆栈跟踪数据等信息。</li>\n<li><code>Error</code> 描述了 Java 运行时系统的内部错误和资源耗尽错误。<strong>你的应用程序中不应该抛出这种类型的错误</strong>。</li>\n<li><code>Exception</code> 描述了程序本身可以捕获并且可以处理的异常，主要分为 RuntimeException 和其他异常。<strong>它们应该在函数声明中被提及并被显示处理</strong>。</li>\n</ul>\n<blockquote>\n<p>RuntimeException 由编程错误导致的异常。<br>\n其他异常：由像 I/O 错误这类的问题导致的异常</p>\n<p>《Java 核心技术卷 Ⅰ：基础知识（原书第11版）》</p>\n</blockquote>\n<h4 id=\"checked-exception-&amp;-unchecked-exception\">Checked Exception &amp; Unchecked Exception<a title=\"#checked-exception-&amp;-unchecked-exception\" href=\"#checked-exception-&amp;-unchecked-exception\"></a></h4>\n<p>Unchecked Exception（非检查型异常/未检异常）：图中绿色部分，编译器不会检查它，会由 JVM 自动抛出并自动捕获。可以看到， Error 类及其派生子类 以及 RuntimeException 类及其派生子类都属于 Unchecked Exception 。也是我们开发中经常碰到的情况。</p>\n<p>Checked Exception（检查型异常/受检异常）：图中红色部分，编译器会检查是否为检查型异常提供了异常处理器。也就是说我们必须为此类异常进行捕获处理。</p>\n<h4 id=\"runtimeexception\">RuntimeException<a title=\"#runtimeexception\" href=\"#runtimeexception\"></a></h4>\n<p>属于 UncheckedException ，即此类异常 Java 编译器不会检查它，此类异常出现的绝大多数情况是代码本身有问题，应该从代码逻辑上解决并改进。</p>\n<h2 id=\"异常处理机制\">异常处理机制<a title=\"#异常处理机制\" href=\"#异常处理机制\"></a></h2>\n<p>由上文可知，只有 Exception 及其派生子类需要进行处理，RuntimeException 编译器不会进行检查，JVM 会自动抛出并捕获，而非 RuntimeException 则必须进行手动捕获。当然 RuntimeException 我们也可以手动捕获。下面介绍一下 Java 中提供了哪些方式帮助开发者处理异常的。</p>\n<h3 id=\"发现异常：-throws-和-throw\">发现异常： throws 和 throw<a title=\"#发现异常：-throws-和-throw\" href=\"#发现异常：-throws-和-throw\"></a></h3>\n<p>要处理异常首先需要发现异常。在 Java 中，我们可以通过 <code>throws</code> 关键字来声明异常，通过 <strong>throw</strong> 关键字来抛出异常。这两种方式都是在告诉开发者需要注意，有异常需要处理。</p>\n<h4 id=\"throws-和-throw-的区别\">throws 和 throw 的区别<a title=\"#throws-和-throw-的区别\" href=\"#throws-和-throw-的区别\"></a></h4>\n<p>throw： 用在方法体中，用于抛出异常。类似这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkedParam</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>throws ：用于声明该方法可能抛出的异常。</p>\n<p>用在方法签名中，类似这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">findFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span><br></pre></td></tr></table></figure>\n<p>如果是用在实现方法上，一般和 throws 关键字一同使用，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">findFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IOException</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>捕获异常： try catch finally</p>\n<p>try catch finally 都是 Java 中的关键字，主要用来捕获程序运行期间发生的异常，可以对已知异常的捕获处理，也可以对未知异常处理，来保证程序的正常运行。使用方法类似这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">findFile</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        getFile();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RuntimeException e)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something if catch RuntimeException</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// always do in here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：这三个关键字主要有这三种组合方式： try - catch，try - catch - finally ，try -finally。</p>\n<p>catch 语句可以有一个或多个或者没有，finally 至多有一个，try 必须要有。</p>\n</blockquote>\n","prev":{"title":"个人博客建站指南","link":"2023/03/16/个人博客建站指南"},"plink":"https://hadron404.github.io/blog/2022/09/20/exceptions/","toc":[{"id":"java-异常机制","title":"Java 异常机制","index":"1","children":[{"id":"异常","title":"异常","index":"1.1","children":[{"id":"java-的异常结构","title":"Java 的异常结构","index":"1.1.1"}]},{"id":"异常处理机制","title":"异常处理机制","index":"1.2","children":[{"id":"发现异常：-throws-和-throw","title":"发现异常： throws 和 throw","index":"1.2.1"}]}]}],"reading_time":"898 words in 6 min"}