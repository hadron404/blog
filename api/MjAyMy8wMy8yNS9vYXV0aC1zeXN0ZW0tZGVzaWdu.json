{"title":"认证中心系统设计 一、认识 OAuth","date":"2023-03-25T20:21:09.000Z","date_formatted":{"ll":"Mar 25, 2023","L":"03/25/2023","MM-DD":"03-25"},"link":"2023/03/25/oauth-system-design","tags":["oauth"],"categories":["system-design"],"updated":"2023-03-25T14:01:51.514Z","content":"<h2 id=\"什么是-oauth\">什么是 OAuth<a title=\"#什么是-oauth\" href=\"#什么是-oauth\"></a></h2>\n<blockquote>\n<p>OAuth 是一个关于授权的开放网络标准，<br>\n允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），<br>\n而无需将用户名和密码提供给第三方应用。</p>\n</blockquote>\n<h3 id=\"oauth-协议中定义的角色\">OAuth 协议中定义的角色<a title=\"#oauth-协议中定义的角色\" href=\"#oauth-协议中定义的角色\"></a></h3>\n<ul>\n<li>”资源所有者（resource owner）“：一个有能力准予访问一个受保护资源的实体。当资源所有者是一个人时，其称为最终用户（end-user）。有时缩写为 ”RO“。</li>\n<li>”资源服务器（resource server）“：托管受保护资源的服务器，有能力接受并且响应使用访问令牌的受保护资源请求。常常通过一个API可访问资源服务器。有时缩写为”RS“。</li>\n<li>”客户端（client）“：一个因为资源所有者和他的授权发起受保护资源的应用程序。术语”客户端（client）“不能指代任何一个具体的实现特征（例：应用是否运行在一个服务器，一个台式计算机或者其他设备上）。</li>\n<li>”授权服务器（authorization server）“： 在资源所有者成功授权以及取得权限之后给客户端发放访问令牌的服务器。有时缩写为”AS“。</li>\n</ul>\n<h3 id=\"oauth-工作流程\">OAuth 工作流程<a title=\"#oauth-工作流程\" href=\"#oauth-工作流程\"></a></h3>\n<div align=\"center\">\n<pre>\n+--------+                               +---------------+\n|        |--(A)- Authorization Request ->|   Resource    |\n|        |                               |     Owner     |\n|        |<-(B)-- Authorization Grant ---|               |\n|        |                               +---------------+\n|        |\n|        |                               +---------------+\n|        |--(C)-- Authorization Grant -->| Authorization |\n| Client |                               |     Server    |\n|        |<-(D)----- Access Token -------|               |\n|        |                               +---------------+\n|        |\n|        |                               +---------------+\n|        |--(E)----- Access Token ------>|    Resource   |\n|        |                               |     Server    |\n|        |<-(F)--- Protected Resource ---|               |\n+--------+                               +---------------+\n</pre>\n</div>\n<ul>\n<li>（A）客户端向从资源所有者请求授权。授权请求可以直接向资源所有者发起（如图所示），或者更可取的是通过作为中介的授权服务器间接发起。</li>\n<li>（B）客户端收到授权许可，这是一个代表资源所有者的授权的凭据，使用本规范中定义的四种许可类型之一或 者使用扩展许可类型表示。授权许可类型取决于客户端请求授权所使用的方式以及授权服务器支持的类型。</li>\n<li>（C）客户端与授权服务器进行身份认证并出示授权许可请求访问令牌。</li>\n<li>（D）授权服务器验证客户端身份并验证授权许可，若有效则颁发访问令牌。</li>\n<li>（E）客户端从资源服务器请求受保护资源并出示访问令牌进行身份验证。</li>\n<li>（F）资源服务器验证访问令牌，若有效则满足该请求</li>\n</ul>\n<h3 id=\"oauth2.1-带来了哪些变化\">OAuth2.1 带来了哪些变化<a title=\"#oauth2.1-带来了哪些变化\" href=\"#oauth2.1-带来了哪些变化\"></a></h3>\n<ul>\n<li>⚡ 推荐使用 Authorization Code + PKCE</li>\n<li>⚡ 【已弃用】隐式授权（Implicit Grant）</li>\n<li>⚡ 【已弃用】密码授权 （Resource Owner Password Credentials Grant）</li>\n<li>⚡ 使用 access_token 时, 不应该通过 URL 传递 token</li>\n<li>⚡ 刷新令牌 (Refresh Token) 应该是一次性的</li>\n<li>⚡ 回调地址（Redirect URI）应该精确匹配</li>\n</ul>\n<h4 id=\"推荐使用-authorization-code-+-pkce\">推荐使用 Authorization Code + PKCE<a title=\"#推荐使用-authorization-code-+-pkce\" href=\"#推荐使用-authorization-code-+-pkce\"></a></h4>\n<p>下边是 Authorization Code + PKCE 的授权流程图</p>\n<p><img src=\"https://blog-1259586045.cos.ap-shanghai.myqcloud.com/clipboard_20211113_103034.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/myshowtime/p/15596630.html\" target=\"_blank\">OAuth 2.1 带来了哪些变化</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-08\" target=\"_blank\">IETF OAuth 2.1 Draft - 08</a></li>\n</ul>\n","prev":{"title":"认证中心系统设计 二、 认证、授权、鉴权和权限控制","link":"2023/03/25/oauth-system-design-2"},"next":{"title":"研发工程师想要提高面试竞争力，应具备的三个技术认知","link":"2023/03/24/interview-architecture-design-1"},"plink":"https://hadron404.github.io/blog/2023/03/25/oauth-system-design/","toc":[{"id":"什么是-oauth","title":"什么是 OAuth","index":"1","children":[{"id":"oauth-协议中定义的角色","title":"OAuth 协议中定义的角色","index":"1.1"},{"id":"oauth-工作流程","title":"OAuth 工作流程","index":"1.2"},{"id":"oauth2.1-带来了哪些变化","title":"OAuth2.1 带来了哪些变化","index":"1.3"}]},{"id":"参考","title":"参考","index":"2"}],"reading_time":"732 words in 5 min"}